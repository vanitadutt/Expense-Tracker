{"ast":null,"code":"var _jsxFileName = \"E:\\\\Vanita\\\\React\\\\React-Tutorial\\\\react-complete-guide\\\\01-starting-setup\\\\src\\\\components\\\\ExpenseItem.js\";\nimport \"./ExpenseItem.css\";\nimport ExpenseDate from \"./ExpenseDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseItem(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"expense-item\",\n    children: [/*#__PURE__*/_jsxDEV(ExpenseDate, {\n      date: props.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expense-item__description\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expense-item__price\",\n        children: [\"$\", props.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ExpenseItem;\nexport default ExpenseItem; // You must only have,\n// one root element here,per return statement\n// or per JSX code snippet, you could say.\n// To give class inside jsx code you need to write className='' instead of class='' bcz class is a reserved name in javascript\n//In {} you can run basic js code in jsx\n//line 19 - Because this being a date object, it can't be output as texts like this.\n// However, we can call to ISO string for example,\n// a built in method available on all date objects to output it as a string\n//date.toLocaleString() - is used to ouput date in human readable format\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseItem\");","map":{"version":3,"names":["ExpenseDate","ExpenseItem","props","date","title","amount"],"sources":["E:/Vanita/React/React-Tutorial/react-complete-guide/01-starting-setup/src/components/ExpenseItem.js"],"sourcesContent":["import \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\n\r\nfunction ExpenseItem(props) {\r\n  return (\r\n    <div className=\"expense-item\">\r\n      <ExpenseDate date={props.date}/>\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default ExpenseItem;\r\n\r\n// You must only have,\r\n// one root element here,per return statement\r\n// or per JSX code snippet, you could say.\r\n\r\n// To give class inside jsx code you need to write className='' instead of class='' bcz class is a reserved name in javascript\r\n\r\n//In {} you can run basic js code in jsx\r\n\r\n//line 19 - Because this being a date object, it can't be output as texts like this.\r\n// However, we can call to ISO string for example,\r\n// a built in method available on all date objects to output it as a string\r\n\r\n\r\n//date.toLocaleString() - is used to ouput date in human readable format"],"mappings":";AAAA,OAAO,mBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;EAC1B,oBACE;IAAK,SAAS,EAAC,cAAf;IAAA,wBACE,QAAC,WAAD;MAAa,IAAI,EAAEA,KAAK,CAACC;IAAzB;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,2BAAf;MAAA,wBACE;QAAA,UAAKD,KAAK,CAACE;MAAX;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,qBAAf;QAAA,gBAAuCF,KAAK,CAACG,MAA7C;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD;;KAVQJ,W;AAaT,eAAeA,WAAf,C,CAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAGA"},"metadata":{},"sourceType":"module"}